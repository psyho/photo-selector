#!/usr/bin/env ruby

require_relative '../lib/rate_image'
require_relative '../lib/list_images'

require "fileutils"
require "thread"

pool_size = 4
original_dir = ARGV[0]
resized_dir = ARGV[1]
output_dir = ARGV[2]

if original_dir.nil? || resized_dir.nil? || output_dir.nil?
  puts "Usage: bin/rate-all-images original_dir resized_dir output_dir"
  exit 1
end

FileUtils.mkdir_p(output_dir)

tasks = Queue.new
each_jpeg(original_dir) do |original_image|
  file_name = File.basename(original_image)
  resized_image = File.join(resized_dir, file_name)
  rating_file = File.join(output_dir, "rating-#{file_name}.json")

  next if File.exist?(rating_file)

  tasks << ->() do
    puts "Rating #{file_name}..."
    rating = rate_image(resized_image)

    rating_value = rating['rating'].to_i
    puts "Image: #{file_name}\nRating: #{rating_value}\nDescription: #{rating['description']}"
    $stdout.flush

    File.write(rating_file, rating.to_json)

    # rated file name = triple-digit rating + original file name
    rated_file_name = "#{rating_value.to_s.rjust(3, '0')}-#{file_name}"
    FileUtils.ln_s(original_image, File.join(output_dir, rated_file_name))
  end
end

threads = pool_size.times.map do
  Thread.new do
    until tasks.empty?
      task = tasks.pop(true) rescue nil

      begin
        task.call if task
      rescue => e
        puts "Error: #{e.message}"
        sleep 5
        retry
      end
    end
  end
end
threads.each(&:join)
